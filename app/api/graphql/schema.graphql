scalar DateTime
scalar JSON

type Assistant {
	id: ID!
	name: String!
	sport: String!
	role: String!
	strengths: [String!]!
	bio: String!
	promptTemplate: String!
	createdAt: DateTime!
	updatedAt: DateTime!
	deletedAt: DateTime
}

type Athlete {
	userId: ID!
	id: ID!
	birthday: String
	gender: String
	fitnessLevel: String
	trainingHistory: String
	height: Float
	weight: Float
	firstName: String!
	lastName: String!
	email: String!
	tags: [String!]
	notes: String
	sport: String!
	createdAt: DateTime!
	updatedAt: DateTime!
	deletedAt: DateTime
	goals: [Goal!]
	sessionLogs: [SessionLog!]
	trainingPlans: [TrainingPlan!]!
}

type Goal {
	id: ID!
	athlete: Athlete!
	title: String!
	description: String
	status: GoalStatus!
	createdAt: DateTime!
	updatedAt: DateTime!
	deletedAt: DateTime
	dueDate: DateTime
	progressNotes: String
	sessionLogs: [SessionLog!]!
	sport: String
	trainingPlans: [TrainingPlan!]
}

enum GoalStatus {
	ACTIVE
	COMPLETED
	PAUSED
}

type SessionLog {
	id: ID!
	athlete: Athlete!
	date: DateTime!
	notes: String
	transcript: String
	summary: String
	actionItems: [String!]
	goals: [Goal!]!
	aiMetadata: AIMetadata
	createdAt: DateTime!
	updatedAt: DateTime!
	deletedAt: DateTime
}

type AIMetadata {
	summaryGenerated: Boolean!
	nextStepsGenerated: Boolean!
}

"""
Represents a structured training plan for an athlete.
"""
type TrainingPlan {
	id: ID!
	athleteId: ID!
	athlete: Athlete!
	goalId: ID
	goal: Goal
	assistantId: ID
	assistant: Assistant
	createdAt: String!
	updatedAt: String!
	startDate: String
	endDate: String
	notes: String
	planJson: JSON
	overview: String
	sourcePrompt: String
	generatedBy: String # ID of the Assistant that generated the plan content
	"""
	The current status of the training plan, reflecting its lifecycle.
	"""
	status: TrainingPlanStatus!
}

"""
Represents the lifecycle status of a training plan.
"""
enum TrainingPlanStatus {
	DRAFT
	GENERATING
	GENERATED
	ERROR
}

input AssistantsFilter {
	sport: String!
	role: String
	strengths: [String]
}

input AssistantsInput {
	filter: AssistantsFilter
}

type Query {
	assistants(input: AssistantsInput): [Assistant]!
	athletes: [Athlete!]!
	athlete(id: ID!): Athlete
	goals(athleteId: ID!): [Goal!]!
	goal(id: ID!, athleteId: ID!): Goal
	sessionLogs(athleteId: ID!): [SessionLog!]!
	sessionLog(id: ID!): SessionLog
	trainingPlan(id: ID!): TrainingPlan
	trainingPlans(athleteId: ID): [TrainingPlan!]!
}

input CreateAthleteInput {
	firstName: String!
	lastName: String!
	birthday: DateTime!
	email: String!
	tags: [String!]
	notes: String
	sport: String!
}

input UpdateAthleteInput {
	firstName: String
	lastName: String
	email: String
	tags: [String!]
	notes: String
	sport: String
}

input CreateGoalInput {
	athleteId: ID!
	title: String!
	description: String
	dueDate: DateTime
	sport: String!
}

input UpdateGoalInput {
	title: String
	description: String
	dueDate: DateTime
	status: GoalStatus
	progressNotes: String
	sport: String
	trainingPlanIds: [ID!]
}

input CreateSessionLogInput {
	athleteId: ID!
	date: DateTime!
	notes: String
	transcript: String
	goalIds: [ID!]
}

input UpdateSessionLogInput {
	notes: String
	transcript: String
	goalIds: [ID!]
	summary: String
	actionItems: [String!]
}

input AISummarizeSessionLogInput {
	sessionLogId: ID!
}

input CreateTrainingPlanInput {
	athleteId: ID!
	assistantIds: [ID!]
	goalIds: [ID!]
}

input AIGenerateSessionInput {
	athleteId: ID!
	goalIds: [ID!]!
	sessionLogIds: [ID!]!
}

input AIAnalyzeProgressInput {
	athleteId: ID!
	startDate: DateTime!
	endDate: DateTime!
}

input AIExtractAndEvaluateGoalInput {
	athleteId: ID!
	goalText: String!
}

type GoalEvaluationResponse {
	coreGoal: CoreGoal!
	goalEvaluation: GoalEvaluation!
	refinedGoalSuggestion: RefinedGoalSuggestion!
	timeline: Timeline!
	motivation: Motivation!
	availability: Availability!
	constraints: Constraints!
	successIndicators: SuccessIndicators!
	extractionConfidence: ExtractionConfidence!
	coachingFeedback: CoachingFeedback!
}

type CoreGoal {
	type: String!
	primaryObjective: String!
	sport: String!
	measurableOutcome: String
}

type GoalEvaluation {
	overallQualityScore: Int!
	specificityScore: Int!
	feasibilityScore: Int!
	relevanceScore: Int!
	timeStructureScore: Int!
	motivationScore: Int!
	evaluationSummary: EvaluationSummary!
}

type EvaluationSummary {
	strengths: [String!]!
	weaknesses: [String!]!
	riskFactors: [String!]!
	improvementPriorities: [String!]!
}

type RefinedGoalSuggestion {
	improvedGoalStatement: String
	keyChanges: [String!]!
	rationale: String!
}

type Timeline {
	targetDate: String
	duration: String
	urgencyLevel: UrgencyLevel!
	milestones: [String!]!
}

enum UrgencyLevel {
	IMMEDIATE
	SHORT_TERM
	MEDIUM_TERM
	LONG_TERM
}

type Motivation {
	whyItMatters: String!
	externalDrivers: [String!]!
	emotionalContext: String!
	supportSystem: [String!]!
}

type Availability {
	trainingTime: String
	scheduleConstraints: [String!]!
	location: String
	equipment: [String!]!
	budget: String
}

type Constraints {
	physicalLimitations: [String!]!
	experienceLevel: ExperienceLevel!
	previousChallenges: [String!]!
	riskFactors: [String!]!
}

enum ExperienceLevel {
	BEGINNER
	INTERMEDIATE
	ADVANCED
	RETURNING
}

type SuccessIndicators {
	measurementMethods: [String!]!
	successDefinition: String!
	secondaryBenefits: [String!]!
}

type ExtractionConfidence {
	overallConfidence: ConfidenceLevel!
	missingInformation: [String!]!
	assumptions: [String!]!
	suggestedQuestions: [String!]!
}

enum ConfidenceLevel {
	HIGH
	MEDIUM
	LOW
}

type CoachingFeedback {
	dataQuality: DataQuality!
	keyGapsIdentified: [String!]!
	improvementSuggestions: [String!]!
	riskFlags: [String!]!
	coachDevelopmentInsight: String!
}

enum DataQuality {
	EXCELLENT
	GOOD
	LIMITED
	INSUFFICIENT
}

input UpdateTrainingPlanInput {
	title: String
	overview: String
	assistantIds: [ID!]
	goalIds: [ID!]
}

type Mutation {
	createAthlete(input: CreateAthleteInput!): Athlete!
	updateAthlete(id: ID!, input: UpdateAthleteInput!): Athlete!
	deleteAthlete(id: ID!): Boolean!

	createGoal(input: CreateGoalInput!): Goal!
	updateGoal(id: ID!, input: UpdateGoalInput!): Goal!
	deleteGoal(id: ID!): Boolean!

	createSessionLog(input: CreateSessionLogInput!): SessionLog!
	updateSessionLog(id: ID!, input: UpdateSessionLogInput!): SessionLog!
	deleteSessionLog(id: ID!): Boolean!

	createTrainingPlan(input: CreateTrainingPlanInput!): TrainingPlan!
	updateTrainingPlan(id: ID!, input: UpdateTrainingPlanInput!): TrainingPlan!

	summarizeSessionLog(input: AISummarizeSessionLogInput!): SessionLog!
	generateSession(input: AIGenerateSessionInput!): SessionLog!
	analyzeProgress(input: AIAnalyzeProgressInput!): String!
	extractAndEvaluateGoal(input: AIExtractAndEvaluateGoalInput!): GoalEvaluationResponse!
}

type Subscription {
	trainingPlanGenerated(athleteId: ID!): TrainingPlan!
	sessionLogAdded(athleteId: ID!): SessionLog!
	goalAdded(athleteId: ID!): Goal!
	sessionLogUpdated(id: ID!): SessionLog!
	goalUpdated(id: ID!): Goal!
	athleteUpdated(id: ID!): Athlete!
}

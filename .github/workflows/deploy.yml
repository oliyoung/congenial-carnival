name: Deploy to AWS App Runner

on:
  push:
    branches:
      - main # Trigger on push to the main branch

env:
  AWS_REGION: us-east-1 # Replace with your desired AWS region

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production  # Add this if you used Environment secrets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          aws sts get-caller-identity

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest # Or a specific version like 1.5.0

      - name: Navigate to Terraform directory
        run: cd terraform

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform # Ensure command runs in the terraform directory
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      # Apply the Terraform configuration
      # Pass variables using -var or a .tfvars file if needed.
      # For simplicity and to match the previous main.tf, we are assuming
      # sensitive values like DATABASE_URL are directly in the `secret_string`
      # resource in main.tf (which is NOT recommended for production).
      # A better approach is to fetch secrets within the application using an IAM role.
      # If you passed secrets via Terraform variables, you'd use -var="variable_name=${{ secrets.YOUR_SECRET_NAME }}"
      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform # Ensure command runs in the terraform directory
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_supabase_url: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          TF_VAR_supabase_anon_key: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          TF_VAR_supabase_service_role_key: ${{ secrets.NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY }}
          TF_VAR_anthropic_key: ${{ secrets.NEXT_PUBLIC_ANTHROPIC_KEY }}
          TF_VAR_open_ai_token: ${{ secrets.NEXT_PUBLIC_OPEN_AI_TOKEN }}


      - name: Get App Runner Service URL
        id: get_url
        run: |
          cd terraform
          SERVICE_URL=$(terraform output -raw apprunner_service_url)
          echo "service_url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "Deployed to: $SERVICE_URL"
        shell: bash
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ env.AWS_REGION }}

      - name: Health Check
        run: |
          echo "🏥 Performing health check on deployed service..."
          SERVICE_URL="${{ steps.get_url.outputs.service_url }}"

          # Wait for service to be ready (App Runner can take a few minutes)
          echo "⏳ Waiting for service to become available..."
          for i in {1..20}; do
            if curl -f -s --max-time 10 "$SERVICE_URL" > /dev/null; then
              echo "✅ Service is healthy and responding"
              echo "🌐 Application URL: $SERVICE_URL"
              exit 0
            fi
            echo "⏳ Attempt $i/20: Service not ready yet, waiting 30 seconds..."
            sleep 30
          done

          echo "❌ Health check failed - service did not become available within 10 minutes"
          echo "🔍 Please check AWS App Runner console for deployment status"
          exit 1
        shell: bash

      - name: Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Service URL**: ${{ steps.get_url.outputs.service_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ Deployment completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Deployment failed - check logs above" >> $GITHUB_STEP_SUMMARY
          fi
---
description:
globs:
alwaysApply: true
---
# congenial-carnival Project Context - UPDATED

## 1. Current State of the Codebase
- This is a greenfield project with sophisticated architectural patterns already established. All features currently implemented in the codebase can be inferred from their UI completeness. New features should follow the established patterns and conventions.
- **File Organization**: Project uses root-level `/app` and `/components` directories (NOT under `/src`)
- **GraphQL**: Fully implemented server with comprehensive resolver structure and DataLoader pattern
- **AI Integration**: Live implementation using Anthropic Claude (not mocked)
- **Repository Pattern**: Sophisticated generic repository classes with user-scoped operations
- The next most important features or screens to build are currently being determined. Establishing and prioritizing the product backlog is the immediate priority.

## 2. Core Data Models & GraphQL Implementation
- The core data models are defined in the GraphQL schema (`app/api/graphql/schema.graphql`), which is always the single source of truth.
- **Fully implemented GraphQL Yoga server** with sophisticated architecture:
  - Complete resolver implementations in `app/api/graphql/mutations/`, `queries/`, `subscriptions/`
  - DataLoader pattern for performance optimization and N+1 prevention
  - Entity relationship resolvers for complex nested queries
  - User-scoped operations with automatic filtering
  - GraphQL Playground available at http://localhost:3000/api/graphql
- Main entities include:
  - **Athlete**: Represents a person being coached, with personal details, goals, session logs, and training plans.
  - **Goal**: Linked to an athlete, tracks objectives, status, progress notes, and related session logs.
  - **SessionLog**: Records individual coaching sessions, notes, transcripts, summaries, action items, and links to goals.
  - **Assistant**: Represents AI coaching assistants. In the context of AI integration, Assistants are primarily used to define and store LLM prompts via the `promptTemplate` field, along with associated metadata like sport, role, and strengths.
  - **TrainingPlan**: Structured plans for athletes, linked to assistants and goals, with plan data in JSON.
  - **AIMetadata**: Metadata for AI-generated content in session logs.
- Relationships and field details are fully described in the GraphQL schema.

## 3. User Flows & Key Screens
- User journeys are derived from the UI. Key flows include:
  - Coach logs in and views their athlete dashboard, with a summary of all athletes, recent activity, and quick actions.
  - Navigates to an athlete profile page (`/athletes/[id]`), reviewing athlete details, tags, and progress.
  - Views and manages goals for each athlete, including creating, editing, and tracking goal progress.
  - Reviews or adds session logs, uploads transcripts, and links sessions to goals for context-rich progress tracking.
  - Creates and manages structured training plans, linking them to athletes, goals, and session logs.
  - Uses built-in AI tools for session summarization, next-step generation, and progress analysis (live implementation using Anthropic Claude).
  - Accesses team management features: creating teams, assigning athletes and coaches, and viewing team dashboards (planned).
  - Experiences a modern, responsive, and accessible UI with dark mode support and mobile-friendly layouts.
  - All flows are designed for clarity, quick navigation, and actionable insights, with future extensibility for notifications, chat, and integrations.
- No wireframes, mockups, or formal user stories exist; development proceeds directly in code and browser.
- Refer to [visual_style_prompt.mdc](mdc:.cursor/rules/visual_style_prompt.mdc) for more context

## 4. AI Integration - LIVE IMPLEMENTATION
- **Real AI integration** is implemented and operational using Anthropic Claude:
  - Uses `@anthropic-ai/sdk` for live API calls to Claude models
  - Environment variable required: `ANTHROPIC_API_KEY`
  - AI functions located in `ai/` directory (generateSession, generateTrainingPlan, etc.)
  - Sophisticated prompt templates in `ai/prompts/`
  - GraphQL mutations for AI features (`summarizeSessionLog`, `generateSession`, `analyzeProgress`) call real AI services
- Actual integration uses the Model Context Protocol (MCP) approach with TypeScript SDK integration
- The AI integration layer supports experimentation and can be extended with additional providers
## 4. AI Integration
- Foundational work for AI integration has begun, including making the core client function generic to handle various AI provider responses. The end-user AI features corresponding to the `summarizeSessionLog`, `generateSession`, and `analyzeProgress` mutations in the GraphQL schema are the current focus and utilize this AI client.
- When implementing these features, ensure they correctly invoke the generic `generateContentWithAI` function and handle its output according to the expected schema shape.
- The core AI client function, `generateContentWithAI` (`ai/lib/aiClient.ts`), has been me formats by accepting an optional parser function.
- Actual integration will use the Model Context Protocol (MCP) ([https://github.com/modelcontextprotocol](mdc:https:/github.com/modelcontextprotocol)), an open protocol for connecting LLMs to external data sources. Use the TypeScript SDK when ready. The specific LLM provider is still to be determined.
- The AI integration layer is intentionally left open for experimentation. Contributors are encouraged to explore, prototype, and suggest new approaches for connecting to LLMs, using MCP, and building AI-powered features.


## 5. Authentication & Authorization
- Supabase Auth is used for authentication ([Supabase Auth docs](mdc:https:/supabase.com/auth)).
- Social logins and user management are supported out of the box.
- Only the "Coach" role is currently implemented. Additional roles ("Athlete", "Admin") are planned after core features and AI integration are complete.
- All authenticated users are assumed to be coaches for now.

## 6. Deployment & Environment
- The project will be deployed to AWS using Terraform for infrastructure as code.
- **Required environment variables** for local development:
  - `DATABASE_URL` - Supabase connection string
  - `ANTHROPIC_API_KEY` - For AI features and Claude API access
  - Additional Supabase auth variables for authentication
- Environment variables and secrets are stored in a `.env` file at the project root for local development. For production, use secure environment variable management (e.g., AWS Secrets Manager, SSM Parameter Store).
- Supabase is always running remotely; use the provided remote Supabase connection string in `.env` as `DATABASE_URL`. No local database setup or automation script is required at this time.
- Only two environments exist: local (development) and production. No staging environment.

## 7. Design System & UI Patterns
- Only use Shadcn UI components and Tailwind CSS for all UI and styling. Do not create custom component libraries or introduce other design systems.
- Branding should be clean, professional, but also soft and fun to reflect the supportive nature of coaching.
- Responsive, accessible, and modern design is required.
- There are currently no Figma files, brand guidelines, or color palettes available. Design system and branding assets are a TODO for the future.

## 8. Performance & Code Conventions
- Follow the conventions in `general.mdc` for code style, structure, and optimization.
- Use React Server Components where possible, minimize client-side state, and optimize for web vitals.
- **File organization**: Root-level `/app` and `/components` directories (not under `/src`)
- **Repository Pattern**: Sophisticated architecture in `/lib/repository/`:
  - Generic `EntityRepository<T>` base class with full CRUD operations
  - User-scoped data access with automatic filtering
  - Column mapping between camelCase (TypeScript) and snake_case (PostgreSQL)
  - Soft delete support with fallback to hard delete
  - DataLoader integration for N+1 query prevention
  - Comprehensive error handling and structured logging
- **DataLoader Pattern**: Implemented for all entity relationships to prevent N+1 queries
- Import paths use `@/*` which maps to the root directory

## 9. Collaboration & Workflow
- Currently, there are no strict conventions for branching or pull requests.
- GitHub is used for code management. Branch development is preferred for future work.
- Linear will be used for ticketing and backlog management soon.
- All architectural decisions, assumptions, and new patterns should be documented in `@context.mdc`, which serves both as prompt context for LLMs and as human-readable documentation for engineers.

## 10. Backlog & Prioritization
- The next most important features or screens to build are currently being determined. Establishing and prioritizing the product backlog is the immediate priority.
- There is currently no formal backlog or prioritized feature/bug list. This will be established as the project matures.

## 11. Third-Party Integrations
- Future plans include integrating with third-party services for calendaring and live chat.
- All integrations should be modular and respect user privacy and security.

## 12. Testing & Quality
- Prefer end-to-end (E2E) and integration testing for most features.
- **Current setup**: Jest configured for unit/component tests
- **TODO**: Playwright setup for E2E tests (dependencies not yet installed)
- **TODO**: Create initial test file examples
- Use Storybook for component-driven development and visual regression testing.
- Use Jest and [Testing Library](mdc:https:/testing-library.com) for unit tests and component tests, following best practices for user-centric, maintainable tests.
- Prioritize tests that reflect real user interactions and flows.

## 13. Documentation
- Continue using `@context.mdc` for project-wide context and decisions.
- Add a `/docs` directory for deeper or feature-specific documentation as the project grows.
- Use JSDoc/TSDoc in code for inline documentation.
- Keep everything in-repo and markdown-based for accessibility and version control.

## 14. Open Questions & Guidance
- Where requirements are unclear, follow best practices for modern TypeScript/Next.js/GraphQL development.
- Document assumptions and decisions in this file for future contributors.
- The AI integration layer is intentionally left open for experimentation.
- There is currently no known technical debt or areas of the codebase to avoid. All areas are open for development, except where otherwise noted in `@context.mdc`.

## 15. Security, Privacy, and Compliance
- There are currently no explicit security, privacy, or compliance requirements (e.g., GDPR, SOC2).
- Always act as if such requirements are in place:
  - Use secure coding practices.
  - Protect all personal and sensitive data (encryption at rest and in transit).
  - Minimize data exposure and follow the principle of least privilege.
  - Be ready to support compliance needs in the future.

---
This file is intended as a living document. Update as the project evolves to ensure all contributors have a clear, shared understanding of congenial-carnival's context and conventions.
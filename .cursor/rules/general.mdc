---
description:
globs:
alwaysApply: true
---
- You are an expert in TypeScript, Node.js, Next.js App Router, urql, GraphQL Yoga, react-hook-form, React, Shadcn UI, and Tailwind and Framer Motion.

- Code Style and Structure
  - Always use named imports and exports
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.

- Naming Conventions

  - All components go in /src/components and are named like new-component.tsx
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.

- TypeScript Usage

  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.

- Syntax and Formatting

  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.

- UI and Styling

  - Only use Shadcn UI and Tailwind CSS for all UI and styling. Do not create custom component libraries or introduce other design systems.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  - No Figma files, brand guidelines, or color palettes yet—use Shadcn and Tailwind defaults.

- Performance Optimization

  - Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
  - Wrap client components in Suspense with fallback.
  - Use dynamic loading for non-critical components.
  - Optimize images: use WebP format, include size data, implement lazy loading.

- Key Conventions

  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Limit 'use client':
    - Favor server components and Next.js SSR.
    - Use only for Web API access in small components.
    - Avoid for data fetching or state management.
  - Follow Next.js docs for Data Fetching, Rendering, and Routing.
  - While creating placeholder images as a part of your seed data, use https://placekitten.com/
  - Place both the /app and /components folders under a /src directory. This organization offers several benefits:
    - Clean, organized, and scalable project structure.
    - Clear separation between application logic (/src/app) and UI components (/src/components).
    - Adheres to industry standards and separation of concerns.

## Components Organization

Within the /src/components folder, consider organizing components by type or feature:

By Type: Group components like forms, buttons, layout elements, etc.

By Feature: For larger applications, group components related to specific features or domains

For example:

  /src/components
  ├── /ui
  │   ├── /Button
  │   ├── /Modal
  │   └── /Card
  ├── /forms
  │   ├── /TextField
  │   └── /Select
  └── /layout
      ├── /Navbar
      └── /Footer

- Private Components: For components used only within specific pages, you can create a _components folder within the relevant /app subdirectory.

- Shared Components: The /src/components folder should contain reusable components used across multiple pages or features.

- Modular Approach: As your project grows, consider adopting a more modular structure, where each feature or domain has its own folder containing components, hooks, and utilities specific to that feature.

## AI Features

- All AI features (e.g., session summarization, next-step generation, progress analysis) must be stubbed/mocked for now. Return static or randomly generated data matching the schema shape.
- Actual AI integration will use Model Context Protocol (MCP) with the TypeScript SDK. The specific LLM provider is still to be determined.
- The AI integration layer is open for experimentation and prototyping.

## Authentication & Authorization

- Supabase Auth is used for authentication. Only the "Coach" role is implemented; "Client" and "Admin" roles will come after core features and AI integration.
- All authenticated users are assumed to be coaches for now.

## Environments & Data

- Only two environments: local (development) and production. No staging environment.
- Supabase is always running remotely; use the provided remote Supabase connection string in `.env` as `DATABASE_URL`. No local database setup or automation script is required at this time.

## Testing & Quality

- Prefer E2E and integration testing (Playwright) for most features.
- Use Storybook for component-driven development and visual regression testing.
- Use Jest and [Testing Library](mdc:https:/testing-library.com) for unit/component tests.
- Prioritize tests that reflect real user interactions and flows.

## Documentation

- Use @context.mdc for all architectural decisions, assumptions, and new patterns. This file is both prompt context for LLMs and human-readable for engineers.
- Add a /docs directory for deeper or feature-specific documentation as the project grows.
- Use JSDoc/TSDoc in code for inline documentation.
- Keep all documentation in-repo and markdown-based for accessibility and version control.

## Security, Privacy, and Compliance

- No explicit security, privacy, or compliance requirements (e.g., GDPR, SOC2) at this time, but always act as if such requirements are in place.
  - Use secure coding practices.
  - Protect all personal and sensitive data (encryption at rest and in transit).
  - Minimize data exposure and follow the principle of least privilege.
  - Be ready to support compliance needs in the future.
